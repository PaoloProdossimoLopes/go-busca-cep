package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
)

// struct Generated by: https://transform.tools/json-to-go
type Cep struct {
	Cep         string `json:"cep"`
	Logradouro  string `json:"logradouro"`
	Complemento string `json:"complemento"`
	Bairro      string `json:"bairro"`
	Localidade  string `json:"localidade"`
	Uf          string `json:"uf"`
	Ibge        string `json:"ibge"`
	Gia         string `json:"gia"`
	Ddd         string `json:"ddd"`
	Siafi       string `json:"siafi"`
}

func main() {
	for _, cep := range os.Args[1:] {
		url := "http://viacep.com.br/ws/" + cep + "/json"
		response, responseError := http.Get(url)
		if responseError != nil {
			fmt.Fprintf(os.Stderr, "Erro ao azer requisição: %v\n", responseError)
		}
		defer response.Body.Close()

		resposneBody, readResponseBodyError := io.ReadAll(response.Body)
		if readResponseBodyError != nil {
			fmt.Fprintf(os.Stderr, "Erro ao ler a resposta: %v\n", responseError)
		}

		var cep Cep
		encodeCepError := json.Unmarshal(resposneBody, &cep)
		if encodeCepError != nil {
			fmt.Fprintf(os.Stderr, "Erro ao converter o CEP para um struct: %v\n", responseError)
		}

		cityFile, openCityFileError := os.Create("cidade.txt")
		if openCityFileError != nil {
			fmt.Fprintf(os.Stderr, "Erro ao criar arquivo: %v\n", openCityFileError)
		}

		defer cityFile.Close()
		_, writeCityFileError := cityFile.WriteString(fmt.Sprintf("CEP=%v\nLogradouro=%v\nComplemento=%v\nBairro=%v\nUf=%v\n", cep.Cep, cep.Localidade, cep.Complemento, cep.Bairro, cep.Uf))
		if writeCityFileError != nil {
			fmt.Fprintf(os.Stderr, "Erro ao escrever no arquivo arquivo: %v\n", openCityFileError)
		}
	}
}
